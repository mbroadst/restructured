'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PunctuationOpeners = '"\'(<\\[{\u0F3A\u0F3C\u169B\u2045\u207D\u208D\u2329\u2768' + '\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA' + '\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991' + '\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28' + '\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D' + '\u301D\uFD3E\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41' + '\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62' + '\xAB\u2018\u201C\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20' + '\u201A\u201E\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D' + '\u2E1D\u2E21\u201B\u201F';

var PunctuationClosers = '"\')>\\]}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u232A\u2769' + '\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB' + '\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992' + '\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29' + '\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E' + '\u301F\uFD3F\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42' + '\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63' + '\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21' + '\u201B\u201F\xAB\u2018\u201C\u2039\u2E02\u2E04\u2E09\u2E0C' + '\u2E1C\u2E20\u201A\u201E';

var PunctuationOpenerToCloser = {};
var PunctuationCloserToOpener = {};

for (var i = 0; i < PunctuationOpeners.length; i++) {
  var opener = PunctuationOpeners[i];
  var closer = PunctuationClosers[i];
  PunctuationOpenerToCloser[opener] = closer;
  PunctuationOpenerToCloser[closer] = opener;
}

var PunctuationDelimiters = '\\-/:\u058A\xA1\xB7\xBF\u037E\u0387\u055A-\u055F\u0589' + '\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C' + '\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D' + '\u07F7-\u07F9\u0830-\u083E\u0964\u0965\u0970\u0DF4\u0E4F' + '\u0E5A\u0E5B\u0F04-\u0F12\u0F85\u0FD0-\u0FD4\u104A-\u104F' + '\u10FB\u1361-\u1368\u1400\u166D\u166E\u16EB-\u16ED\u1735' + '\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945' + '\u19DE\u19DF\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-' + '\u1B60\u1C3B-\u1C3F\u1C7E\u1C7F\u1CD3\u2010-\u2017\u2020-' + '\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-' + '\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2E00' + '\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E1B\u2E1E\u2E1F\u2E2A-' + '\u2E2E\u2E30\u2E31\u3001-\u3003\u301C\u3030\u303D\u30A0' + '\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7' + '\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F' + '\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uABEB' + '\uFE10-\uFE16\uFE19\uFE30-\uFE32\uFE45\uFE46\uFE49-\uFE4C' + '\uFE50-\uFE52\uFE54-\uFE58\uFE5F-\uFE61\uFE63\uFE68\uFE6A' + '\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C-\uFF0F\uFF1A' + '\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65';

var PunctuationDelimiterSet = {};
for (var _i = 0; _i < PunctuationOpeners.length; _i++) {
  PunctuationDelimiterSet[PunctuationDelimiters[_i]] = true;
}

var PunctuationClosingDelimiters = '\\\\.,;!?';

var PunctuationQuotePairs = {
  '\xbb': '\xbb',
  '\u2018': '\u201A',
  '\u2019': '\u2019',
  '\u201A': '\u2018\u2019',
  '\u201C': '\u201E',
  '\u201E': '\u201C\u201D',
  '\u201D': '\u201D',
  '\u203A': '\u203A'
};

var PunctuationStartStringPrefix = new RegExp('\\s|[' + PunctuationOpeners + PunctuationDelimiters + ']');

var PunctuationEndStringSuffix = new RegExp('\\s|[' + PunctuationClosingDelimiters + ('' + PunctuationDelimiters + PunctuationClosers + ']'));

var ParserUtil = {
  calcIndentSize: function calcIndentSize(str) {
    var tabStop = 8;
    return _lodash2.default.reduce(str, function (total, c) {
      if (c === '\t') {
        return total + tabStop - (total + tabStop) % tabStop;
      }
      return total + 1;
    }, 0);
  },
  isPunctuationOpener: function isPunctuationOpener(c) {
    return c in PunctuationOpenerToCloser;
  },
  isPunctuationCloser: function isPunctuationCloser(c) {
    return c in PunctuationCloserToOpener;
  },
  isPunctuationDelimiter: function isPunctuationDelimiter(c) {
    return c in PunctuationDelimiterSet;
  },
  isMatchPunctuations: function isMatchPunctuations(c1, c2) {
    return PunctuationOpenerToCloser[c1] === c2 || c1 in PunctuationQuotePairs && PunctuationQuotePairs[c1].indexOf(c2) !== -1;
  },
  isInlineMarkupPrefix: function isInlineMarkupPrefix(c) {
    return PunctuationStartStringPrefix.test(c);
  },
  isInlineMarkupSuffix: function isInlineMarkupSuffix(c) {
    return PunctuationEndStringSuffix.test(c);
  },
  isUpperRomanNumber: function isUpperRomanNumber(s) {
    return (/^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/.test(s)
    );
  },
  isLowerRomanNumber: function isLowerRomanNumber(s) {
    return (/^m{0,3}(cm|cd|d?c{0,3})(xc|xl|l?x{0,3})(ix|iv|v?i{0,3})$/.test(s)
    );
  },
  romanToNumber: function romanToNumber(s) {
    var values = [['M', 1000], ['CM', 900], ['D', 500], ['CD', 400], ['C', 100], ['XC', 90], ['L', 50], ['XL', 40], ['X', 10], ['IX', 9], ['V', 5], ['IV', 4], ['I', 1]];
    var result = 0;
    var str = s;

    for (var _i2 = 0; _i2 < values.length; _i2++) {
      var _values$_i = _slicedToArray(values[_i2], 2),
          key = _values$_i[0],
          value = _values$_i[1];

      var regex = new RegExp('^' + key);
      while (str.match(regex)) {
        result += value;
        str = str.replace(regex, '');
      }
    }
    return result;
  },
  numberToRoman: function numberToRoman(d) {
    var values = [['M', 1000], ['CM', 900], ['D', 500], ['CD', 400], ['C', 100], ['XC', 90], ['L', 50], ['XL', 40], ['X', 10], ['IX', 9], ['V', 5], ['IV', 4], ['I', 1]];
    var rest = d;
    var result = '';
    for (var _i3 = 0; _i3 < values.length; _i3++) {
      var _values$_i2 = _slicedToArray(values[_i3], 2),
          key = _values$_i2[0],
          value = _values$_i2[1];

      while (rest >= value) {
        result += key;
        rest -= value;
      }
    }
    return result;
  }
};

exports.default = ParserUtil;
//# sourceMappingURL=data:application/json;base64,